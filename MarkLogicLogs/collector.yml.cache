receivers:
  filelog:
    include:
      - /Users/brianlangbecker/Documents/GitHub/MarkLogicServer/MarkLogicLogs/logs/logfile.log
    operators:
      - type: regex_parser
        regex: '^(?P<timestamp>\S+ \S+)\s+(?P<level>(Notice:\+|Notice|Info|WARN)):\s*(?P<message>.*)$'
        parse_to: attributes


processors:
  batch:
    timeout: 1s
    send_batch_size: 10

  transform:
    log_statements:
      - context: log
        statements:
          # Step 1: Set the level to "Notice:+" if "Notice+" exists in the body
          - 'set(attributes["level"], "NoticePlus") where IsMatch(body, "Notice:\\+") == true'

          # Step 2: Initialize combined_message for "Notice" logs
          - 'set(cache["_temp_"], attributes["message"]) where attributes["level"] == "Notice"'

          # Step 3: Append continuation lines ("Notice:+") to combined_message
          - 'set(cache["_temp_"], Concat([cache["_temp_"], attributes["message"]], ":::::")) where attributes["level"] == "NoticePlus"'

          # Step 4: Replace the body of the final "Notice" log with the combined message
          - 'set(body, cache["_temp_"]) where attributes["level"] == "NoticePlus"'

          # Step 5: Drop continuation lines ("Notice:+")
          #- 'set(dropped, true) where attributes["level"] == "Notice:+"'

          # Step 6: Clean up cache after processing
          #- 'delete_key(cache, "_temp_") where attributes["level"] == "Notice"'

exporters:
  logging:
    loglevel: debug

service:
  pipelines:
    logs:
      receivers: [filelog]
      processors: [batch, transform]
      exporters: [logging]



